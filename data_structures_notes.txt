DATA STRUCTURES


## BFS ##
Breadth-First Search

Reads a tree layer by layer, until it reaches the end and terminates
check back on video here


## DFS ##
Depth-First Search
goes straight to the bottom
less "patient," goes straight to the bottom, more "aggressive"
use when looking for "leaves," ie end cases (like outcomes)
don't use when what you're looking for might be closer to root than leaves

think of lightening: shooting all the way down to the bottom (ground), then going back up into sky
or think of a pig rooting around in the ground

DFS works recursively

# base case

def DFS(root, target)
if root == nil, return nil
if root == target, return target
inductive step is DFS(left) or DFS(right)

def DFS(root, target)
  return nil if root == nil #this is only nec for a binary tree, not a n-ary tree
  return root if root.val == target

  root.children.each do |child|
    search_result = DFS(child, target)
    return search_result unless search_result == nil
  end
  nil
end

PS all these "tree" visualizations & metaphors are upside down, grrr!
